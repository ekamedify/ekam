---
import Button from "./system/Button.astro";
import Text from "./system/Text.astro";
import logo from "../images/logo2.png";
import config from "../../config";
import emailIconWhite from '../icons/EmailWhite.svg'
import phoneIconWhite from '../icons/Phone.svg'
import ExternalIcon from "./icons/ExternalIcon.astro";
import { Image } from "astro:assets";

interface Menu {
  title: string;
  link?: string;
  submenu?: {
    title: string;
    link: string;
    forceInactive?: boolean;
  }[];
}
const menu: Array<Menu> = [
  {
    title: "Home",
    link: "/",
  },
  {
    title: "About Us",
    // link: "/about-us",
    submenu: [
      { title: 'Our Mission & Vision', link: '/about-us#mission' },
      { title: 'Our Philosophy', link: '/about-us#philosophy' },
      { title: 'Inquiry based learning', link: '/about-us#inquirybasedlearning' },
      { title: 'Quality Policy', link: '/about-us#policy' },
      { title: 'Our Management', link: '/about-us#management' },
      { title: 'Advisory board', link: '/about-us#board' },
      { title: 'Connect with Ekam', link: '/about-us#connect' }
    ]
  },
  {
    title: "Academics",
    // link: "/academics",
    submenu: [
      { title: 'CBSE Curriculum', link: '/cbse-curriculum' },
      { title: 'CAIE Curriculum', link: '/cambridge-curriculum' },
      { title: 'Inquiry based learning', link: '/about-us#inquirybasedlearning', forceInactive: true },
      { title: 'Assessment', link: '/assessment' },
      { title: 'STEM', link: '/stem-education' },
      // { title: 'Clubs', link: '/clubs' },
      // { title: 'Co-scholastics', link: '' }
    ]
  },
  {
    title: "Campus",
    link: "/electronic-city-campus-facilities",
  },
  {
    title: "Co-scholastics",
    link: "/coscholastics",
  },
  {
    title: "Admissions",
    link: "/admissions",
  },
  {
    title: "Careers",
    link: "/career",
  },
  
];

// get route from path
const { campusName } = Astro.params;
const campusConfig = config.campus.find((c) => c.internalName === campusName);
const admissionLink =
  campusConfig?.admissionLink || config.campus[0].admissionLink;
const ctaButtons: Array<{
  title: string;
  link: string | undefined;
  type?: "primary" | "secondary" | "default";
  icon?: any;
  className?: string;
  menu?: boolean;
}> = [
  {
    title: "Enquire Now",
    link: admissionLink,
    menu: true,
    className: "apply-now-button",
    type: "primary",
  },
  // {
  //   title: 'Login',
  //   link: config.ctaLink,
  //   type: 'default',
  //   menu: true,

  //   icon: ExternalIcon,
  // }
];

const activePath = Astro.url.pathname;

const removeHash = url => {
  const hashIndex = url.indexOf('#')
  if (hashIndex === -1) return url
  return url.slice(0, hashIndex)
}

const shouldBeActive = (item, activePath) => {
  // item.link === activePath || 
  // item.submenu.map(({ link }) => removeHash(link)).includes(activePath)
  const submenuItem = item.submenu.find(({ link }) => {
    const active = removeHash(link) === activePath
    return active
  })
  console.log('submenuItem...', submenuItem)
  // console.log('forceInactive...', forceInactive)

  return item.link === activePath || (!!submenuItem && !submenuItem.forceInactive)
}
---
<div class="fixed z-[999] bg-white">
  <div class="py-2 max-md:pt-2 max-md:pb-0 w-full max-md:px-2 transition-all bg-primary max-md:bg-white menu-bar max-md:[&.active]:bg-[#fff6ea] px-12 text-white flex flex-row items-center justify-between max-md:flex-col max-md:gap-3">
    <div class="flex flex-row justify-between max-md:px-4 max-md:py-1 max-md:w-full gap-6">
      
      <Text type="sm" class="font-bold max-md:text-[15px] max-md:hidden">Admissions Open</Text>
      <div class='max-md:flex hidden flex-row items-center h-full'>
        <div class='w-4'>
          <Image src={phoneIconWhite} alt="Phone Icon" class="w-full h-full">
        </div>
        <div class="flex flex-row max-md:text-primary">
          <a target='_blank' href='tel:+919900077180' class="hover:underline font-bold"><Text type={'regular'} class='ml-2 max-md:text-[15px]'>+91 9900077180 </Text></a>
          /
          <a target='_blank' href='tel:+919900077181' class="hover:underline font-bold"><Text type={'regular'} class='max-md:text-[15px]'>81</Text></a>
        </div>
      </div>

      <div class="max-md:block hidden">
        <form autocomplete="off">
          <div id="menuToggle">
            <input class="menu-checkbox" type="checkbox" />
            <span></span>
            <span></span>
            <span></span>
          </div>
        </form>
      </div>
    </div>
    <div class="flex flex-row items-center h-full gap-8 max-md:gap-3 max-md:hidden">
      <div class='flex flex-row items-center h-full'>
        <div class='w-6 max-md:w-5'>
          <Image src={emailIconWhite} alt="Email Icon" class="w-full h-full">
        </div>
        <a target='_blank' href="mailto:admissionsekamedify@gmail.com" class="hover:underline w-[90%]">
          <Text type={'sm'} class='ml-2 font-bold max-md:text-[15px] '>admissionsekamedify@gmail.com</Text>
        </a>
      </div>
      <div class='flex max-md:hidden flex-row items-center h-full'>
        <div class='w-4 max-md:w-3'>
          <Image src={phoneIconWhite} alt="Phone Icon" class="w-full h-full">
        </div>
        <div class="flex flex-row">
          <a target='_blank' href='tel:+919900077180' class="hover:underline font-bold"><Text type={'sm'} class='ml-2 max-md:text-[15px] '>+91 9900077180</Text></a>
          /
          <a target='_blank' href='tel:+919900077181' class="hover:underline font-bold"><Text type={'sm'} class='max-md:text-[15px]'>81</Text></a>
        </div>
      </div>
    </div>
  </div>
  <header
    class="font-roundo w-screen relative bg-white border-[#fff6ea] border-b-[2px] py-1 pl-10 px-14 max-md:px-5 box-border flex flex-row justify-between items-center backdrop-blur-md h-[80px]"
    style={{
      boxShadow: "0px 1px 7px 0px #8888881c",
    }}
    >
    <div class="flex flex-row items-center">    
      <a href="/" class="relative z-10 daisy daisy-fixed daisy-1 w-[195px] max-sm:w-[80%] max-sm:max-w-[260px] max-md:pl-4">
        <img src={logo.src} alt="Ekam's Logo"  />
      </a>
    </div>
    <div class="flex flex-row items-center max-md:hidden text-lg flex-shrink-0">
      {
        menu.map((item, i) => {
          if (item.submenu && item.submenu.length > 0) {
            return (
              <div
                class={`relative menu-parent cursor-pointer daisy daisy-2 daisy-fixed`}
              >
                <div
                  class:list={[
                    "flex flex-row items-center mr-8 max-md:mr-0",
                    i >= menu.length - 1 && "mr-0 max-md:mr-0",
                  ]}
                >
                  {item.link ? (
                    <a
                      href={item.link}
                      class:list={[
                        "text-black font-semibold hover:underline font-sans",
                        shouldBeActive(item, activePath) && "!text-primary",
                      ]}
                    >
                      {item.title}
                    </a>
                  ) : (
                    <span 
                      class:list={["text-black font-semibold hover:underline font-sans",
                      shouldBeActive(item, activePath) && "!text-primary",
                    ]}
                    >
                      {item.title}
                    </span>
                  )}
                  <div class="w-6 h-6 ml-1">
                    <svg
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M5.94524 9.20954C6.16089 8.95794 6.53967 8.9288 6.79127 9.14446L12.0008 13.6098L17.2103 9.14446C17.4619 8.9288 17.8407 8.95794 18.0563 9.20954C18.272 9.46113 18.2429 9.83991 17.9913 10.0556L12.3913 14.8556C12.1666 15.0482 11.835 15.0482 11.6103 14.8556L6.01032 10.0556C5.75872 9.83991 5.72958 9.46113 5.94524 9.20954Z"
                        class={
                          shouldBeActive(item, activePath) ? "fill-primary" : "fill-black"
                        }
                      />
                    </svg>
                  </div>
                </div>
                <div
                  class="absolute w-[250px] pt-[10px] menu bg-white"
                >
                  <div class="w-full h-full bg-white" style={{
                    boxShadow: "0px 10px 20px rgba(0, 0, 0, 0.1)",
                  }}>
                    {item.submenu.map((subitem, j) => (
                      <div
                        class="py-[14px] px-3"
                        style={{
                          borderBottom:
                            j >= item?.submenu?.length - 1
                              ? "none"
                              : "1px solid rgba(0, 0, 0, 0.2)",
                        }}
                      >
                        <a
                          href={subitem.link}
                          class:list={[
                            "text-black font-semibold hover:underline font-sans",
                            // subitem.link === activePath && '!text-primary'
                          ]}
                        >
                          {subitem.title}
                        </a>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            );
          } else if (item.link) {
            return (
              <a
                href={item?.link}
                class:list={[
                  "text-black hover:underline mr-8 max-md:mr-0 daisy daisy-fixed daisy-2 font-sans font-semibold",
                  item.link === activePath && "!text-primary",
                ]}
              >
                {item.title}
              </a>
            );
          }
        })
      }
    </div>
    <div class="flex gap-3 flex-shrink-0">
      {
        ctaButtons.map((item) => {
          return (
            <a
              href={item.link}
              class={`${item.menu} ${item?.className}`}
            >
              <Button iconClass="max-md:hidden" class="font-sans relative z-10" buttonClass="max-md:px-3 max-md:py-2" textClass="max-md:!text-sm" type={item.type} icon={item?.icon}>
                {item.title}
              </Button>
            </a>
          );
        })
      }
    </div>
  
    
  
    <div class="mobileMenu absolute top-0 left-0 w-screen h-screen bg-[#fff6ea] flex flex-col pt-24 overflow-scroll" class="max-md:visible hidden">
      {menu.map(item => {
        if (item.submenu && item.submenu.length > 0) {
          return (
            <div class='mobileMenuParent'>
              <div class='relative py-[14px] px-5 mr-8 max-md:mr-0 w-full' style={{ 
                borderBottom: '1px solid rgba(0, 0, 0, 0.2)'
              }}>
                <div class='flex flex-row w-full'>
                  <span 
                    class="text-black font-semibold hover:underline"
                  >{item.title}</span>
                  <div class='w-6 h-6 ml-1 -rotate-90 menu-arrow'>
                    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path fill-rule="evenodd" clip-rule="evenodd" d="M5.94524 9.20954C6.16089 8.95794 6.53967 8.9288 6.79127 9.14446L12.0008 13.6098L17.2103 9.14446C17.4619 8.9288 17.8407 8.95794 18.0563 9.20954C18.272 9.46113 18.2429 9.83991 17.9913 10.0556L12.3913 14.8556C12.1666 15.0482 11.835 15.0482 11.6103 14.8556L6.01032 10.0556C5.75872 9.83991 5.72958 9.46113 5.94524 9.20954Z" fill="black"/>
                    </svg>					
                  </div>
                </div>
              </div>
              <div class="subMenu flex flex-col">
                {item.submenu.map((subMenuItem) => (
                  <a 
                    href={subMenuItem.link}
                    data-menu-mobile-item
                    class="relative py-[14px] px-5 mr-8 max-md:mr-0 w-full text-black font-semibold hover:underline pl-10"
                    style={{
                      borderBottom: "1px solid rgba(0, 0, 0, 0.2)",
                    }}
                  >
                      {subMenuItem.title}
                  </a>
                ))}
              </div>
            </div>
          )
        } else {
          return (
            <div class='mobileMenuParent'>
              <a data-menu-mobile-item href={item.link} class='text-black font-semibold hover:underline flex flex-row gap-2 items-center first-letter:relative py-[14px] px-5 mr-8 max-md:mr-0 w-full' style={{ 
                borderBottom: '1px solid rgba(0, 0, 0, 0.2)'
              }}>
                  {item.title}
              </a>
            </div>
          )
        }
      })}
    </div>
  
    <div class="hidden">
      <div
        style={{
          width: "18px",
          height: "1.5px",
          color: "#fff",
          backgroundColor: "#fff",
          // transform: 'rotate(180deg)',
        }}
      >
      </div>
      <div
        style={{
          width: "18px",
          height: "1.5px",
          color: "#fff",
          backgroundColor: "#fff",
          marginTop: "3.5px",
          // transform: 'rotate(180deg)',
        }}
      >
      </div>
      <div
        style={{
          width: "18px",
          height: "1.5px",
          color: "#fff",
          backgroundColor: "#fff",
          marginTop: "3.5px",
          // transform: 'rotate(180deg)',
        }}
      >
      </div>
    </div>
  </header>
</div>
<div class="max-md:h-[120px] h-[120px]"></div>

<style>
  .menu {
    opacity: 0;
    pointer-events: none;
    transform: translateY(10px);
    transition: all 0.3s ease;
  }
  .menu.visible {
    opacity: 1;
    pointer-events: all;
    transform: translateY(0px);
  }

  #menuToggle {
    display: block;
    position: relative;

    z-index: 1;
    position: relative;
    top: 4px;

    -webkit-user-select: none;
    user-select: none;
  }

  #menuToggle input {
    display: block;
    width: 40px;
    height: 32px;
    position: absolute;
    top: -7px;
    left: -5px;

    cursor: pointer;

    opacity: 0; /* hide this */
    z-index: 2; /* and place it over the hamburger */

    -webkit-touch-callout: none;
  }

  /*
  * Just a quick hamburger
  */
  #menuToggle span {
    display: block;
    width: 25px;
    height: 2px;
    margin-bottom: 5px;
    position: relative;

    background: #FF6F24;
    border-radius: 3px;

    z-index: 1;

    transform-origin: 4px 0px;

    transition:
      transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1),
      background 0.5s cubic-bezier(0.77, 0.2, 0.05, 1),
      opacity 0.55s ease;
  }

  #menuToggle span:first-child {
    transform-origin: 0% 0%;
  }

  #menuToggle span:nth-last-child(2) {
    transform-origin: 0% 100%;
  }

  /* 
  * Transform all the slices of hamburger
  * into a crossmark.
  */

  #menuToggle input:checked ~ span:nth-last-child(3) {
    opacity: 1;
    transform: rotate(45deg) translate(0px, -1px);
    /*   background: #232323; */
  }

  #menuToggle input:checked ~ span:nth-last-child(1) {
    opacity: 1;
    transform: rotate(-45deg) translate(1px, -2px);
    /*   background: #232323; */
  }

  /*
  * But let's hide the middle one.
  */
  #menuToggle input:checked ~ span:nth-last-child(2) {
    opacity: 0;
    transform: rotate(0deg) scale(0.2, 0.2);
  }

  /*
  * Ohyeah and the last one should go the other direction
  */
  #menuToggle input:checked ~ span:nth-last-child(2) {
    transform: rotate(-45deg) translate(0, -1px);
  }

  .mobileMenu {
    opacity: 0;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    pointer-events: none;
  }
  .mobileMenu.visible {
    opacity: 1;
    transform: translateY(0px);
    pointer-events: all;
  }

  .mobileMenuParent .subMenu {
    /* opacity: 0; */
    /* transform: translateY(-10px); */
    transition: all 0.3s ease;
    /* pointer-events: none; */
    max-height: 0;
    overflow: hidden;
  }
</style>

<script>
  const menuParent = document.querySelectorAll(
    ".menu-parent"
  ) as NodeListOf<HTMLDivElement>;
  const menuCheckBox = document.querySelector(
    ".menu-checkbox"
  ) as HTMLInputElement;
  const menuChild = document.querySelectorAll(
    ".menu"
  ) as NodeListOf<HTMLDivElement>;
  menuParent.forEach((el) => {
    let removeTimeout: any = null;
    const menu = el.querySelector(".menu") as HTMLDivElement;
    el.addEventListener("mouseover", () => {
      clearTimeout(removeTimeout);
      menuChild.forEach((elC) => {
        if (elC !== menu) {
          console.log("elC...", elC);
          console.log("el...", el);
          elC.classList.remove("visible");
        }
      });
      setTimeout(() => {
        menu.classList.add("visible");
      }, 0);
    });
    el.addEventListener("mouseout", () => {
      removeTimeout = setTimeout(() => {
        menu.classList.remove("visible");
      }, 50);
    });
    menu.addEventListener("mouseover", () => {
      clearTimeout(removeTimeout);
    });
    menu.addEventListener("mouseout", () => {
      // menu.classList.remove('visible')
    });
  });

  // mobile menu
  const menuToggle = document.querySelector("#menuToggle") as HTMLInputElement;
  const mobileMenu = document.querySelector(".mobileMenu") as HTMLDivElement;

  menuToggle.addEventListener("click", () => {

    mobileMenu.classList.toggle("visible");

    document.querySelector('.menu-bar').classList.toggle('active')
  });
  const mobileMenuParents = document.querySelectorAll(
    ".mobileMenuParent"
  ) as NodeListOf<HTMLDivElement>;

  mobileMenuParents.forEach((el) => {
    const subMenu = el.querySelector(".subMenu") as HTMLDivElement;
    el.addEventListener("click", () => {
      subMenu.classList.toggle("visible");
      if (subMenu.classList.contains("visible")) {
        subMenu.style.maxHeight = "100vh";
      } else {
        subMenu.style.maxHeight = "0px";
      }
    });
  });
  // document.addEventListener('astro:beforeload', () => {
  //   console.log('helllo... 11')
  //   const path = window.location.pathname
  //   const campuseName = path.split('-')[1]
  //   const campusConfig = config.campus.find(c => c.internalName === campuseName)
  //   let admissionLink = campusConfig?.admissionLink
  //   console.log('admissionLink...')
  //   if (!admissionLink) {
  //     admissionLink = config.campus[0].admissionLink
  //   }
  //   const button = document.querySelector('.apply-now-button') as HTMLDivElement
  //   if(admissionLink){
  //     button.setAttribute('href', admissionLink)
  //   }

  //   mobileMenu.classList.remove('visible')
  //   menuCheckBox.checked = false
  // })
</script>
